!function(n){var e={};function a(t){if(e[t])return e[t].exports;var o=e[t]={i:t,l:!1,exports:{}};return n[t].call(o.exports,o,o.exports,a),o.l=!0,o.exports}a.m=n,a.c=e,a.d=function(n,e,t){a.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},a.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},a.t=function(n,e){if(1&e&&(n=a(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(a.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)a.d(t,o,function(e){return n[e]}.bind(null,o));return t},a.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return a.d(e,"a",e),e},a.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},a.p="",a(a.s=6)}([function(n,e){n.exports=function(n){function e(n){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",n)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(n):"undefined"!=typeof eval?eval.call(null,n):e("EvalError: No eval function available")}catch(n){e(n)}}},,,,,,function(n,e,a){a(7),n.exports=a(8)},function(n,e){n.exports='<!doctype html> <html lang=en xmlns:v-on=http://www.w3.org/1999/xhtml xmlns:v-bind=http://www.w3.org/1999/xhtml> <head> <meta charset=utf-8> <meta name=viewport content="width=device-width,initial-scale=1,shrink-to-fit=no"> <meta name=description content=""> <meta name=author content="Mark Otto, Jacob Thornton, and Bootstrap contributors"> <meta name=generator content="Jekyll v3.8.5"> <title>Link2Web - Next Generation</title> <link href=../../../css/bootstrap-4.4.0.min.css rel=stylesheet> <link href=../../../css/app.css rel=stylesheet> <link rel=stylesheet href=../../../node_modules/@fortawesome/fontawesome-free/css/all.css /> <style>.bd-placeholder-img{font-size:1.125rem;text-anchor:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}@media (min-width:768px){.bd-placeholder-img-lg{font-size:3.5rem}}.nopad{padding:0}body,html{height:100%;margin:0;padding:0}footer{position:absolute;color:#e2e6ea;background-color:#1d2124;bottom:0;width:100%}</style> </head> <body onload=init()> <nav class="navbar navbar-lg fixed-top bg-light flex-md-nowrap p-0 shadow"> <a class="navbar-brand col-sm-3 col-md-2 mr-0" href=#>volvo.sunnana.link2web.se</a> <ul class="navbar-nav px-3 al"> <li class="nav-item text-nowrap"> <a class=nav-link href=#>Home</a> </li> </ul> <ul class="navbar-nav px-3 al"> <li class="nav-item text-nowrap"> <a class=nav-link href=#>Volvo</a> </li> </ul> <ul class="navbar-nav px-3 al"> <li class="nav-item text-nowrap"> <a class=nav-link href=#>Trianon</a> </li> </ul> <ul class="navbar-nav px-3 al"> <li class="nav-item text-nowrap"> <a class=nav-link href=#>Idoff</a> </li> </ul> <ul class="navbar-nav px-3"> <li class="nav-item text-nowrap"> <a class=nav-link href=#>SBC</a> </li> </ul> <ul class="navbar-nav px-3"> <li class="nav-item text-nowrap"> <a class=nav-link href=#>Other</a> </li> </ul> <ul class="navbar-nav px-3"> <li class="nav-item text-nowrap"> <a class=nav-link href=#>Sign out</a> </li> </ul> </nav> <div class=container-fluid style=height:100%> <div class=row style=height:100%> <nav class="col-md-1 d-none d-md-block bg-light sidebar"> <div class=sidebar-sticky> <div class="h5 ml-2">Systems</div> <div class=accordion id=systems> <div class=card> <div class="card-header nopad" id=system1> <h2 class=mb-0> <button class="btn btn-link" type=button data-toggle=collapse data-target=#collapseS1 aria-expanded=false aria-controls=collapseS1> 5601-Golv </button> </h2> </div> <div id=collapseS1 class="collapse show" aria-labelledby=system1 data-parent=#systems> <div class=card-body> <ul class="nav flex-column"> <li class=nav-item> <a class="nav-link nopad" href=#>Base</a> </li> <li class=nav-item> <a class="nav-link nopad" href=#>Shunt</a> </li> <li class=nav-item> <a class="nav-link nopad" href=#>Alarms</a> </li> </ul> </div> </div> </div> <div class=card> <div class="card-header nopad" id=system2> <h2 class=mb-0> <button class="btn btn-link collapsed" type=button data-toggle=collapse data-target=#collapseS2 aria-expanded=false aria-controls=collapseTwo> 5601-Rad </button> </h2> </div> <div id=collapseS2 class=collapse aria-labelledby=system2 data-parent=#systems> <div class=card-body> <ul class="nav flex-column"> <li class=nav-item> <a class="nav-link nopad" href=#>Base</a> </li> <li class=nav-item> <a class="nav-link nopad" href=#>Shunt</a> </li> <li class=nav-item> <a class="nav-link nopad" href=#>Alarms</a> </li> </ul> </div> </div> </div> <div class=card> <div class="card-header nopad" id=system3> <h2 class=mb-0> <button class="btn btn-link collapsed" type=button data-toggle=collapse data-target=#collapseS3 aria-expanded=false aria-controls=collapseS3> 5701-VP1 </button> </h2> </div> <div id=collapseS3 class=collapse aria-labelledby=system3 data-parent=#systems> <div class=card-body> <ul class="nav flex-column"> <li class=nav-item> <a class="nav-link nopad" href=#>Defrost</a> </li> <li class=nav-item> <a class="nav-link nopad" href=#>Metering</a> </li> <li class=nav-item> <a class="nav-link nopad" href=#>Alarms</a> </li> </ul> </div> </div> </div> <div class=card> <div class="card-header nopad" id=system4> <h2 class=mb-0> <button class="btn btn-link collapsed" type=button data-toggle=collapse data-target=#collapseS4 aria-expanded=false aria-controls=collapseS4> 5701-VP2 </button> </h2> </div> <div id=collapseS4 class=collapse aria-labelledby=system4 data-parent=#systems> <div class=card-body> <ul class="nav flex-column"> <li class=nav-item> <a class="nav-link nopad" href=#>Defrost</a> </li> <li class=nav-item> <a class="nav-link nopad" href=#>Metering</a> </li> <li class=nav-item> <a class="nav-link nopad" href=#>Alarms</a> </li> </ul> </div> </div> </div> </div> </div> </nav> <nav id=blocks class="col-md-1 d-none d-md-block bg-light sidebar"> <div class=sidebar-sticky> <div class="h5 ml-2">Blocks</div> <div class="nav flex-column accordion" id=libraries> <div v-for="(comp,lib) in components" class=card> <div class="card-header nopad" v-bind:id="lib+\'Card\'"> <h2 class=mb-0> <button class="btn btn-link" type=button data-toggle=collapse v-bind:data-target="\'#\'+lib+\'Collapse\'" aria-expanded=false v-bind:aria-controls="lib+\'Collapse\'"> {{lib}} </button> </h2> </div> <div v-bind:id="lib+\'Collapse\'" class="collapse hide" v-bind:aria-labelledby="lib+\'Card\'" data-parent=#libraries> <div class=card-body> <ul class="nav flex-column"> <li v-for="c in comp" class=nav-item> <a v-on:click=instantiateComponent(lib,c) class="nav-link nopad" href=#>{{c.name}}</a> </li> </ul> </div> </div> </div> </div> </div> </nav> <main role=main class="col-md-9 ml-sm-auto col-lg-10 px-4"> <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom"> <h4 class=h4> <div class="btn-toolbar mb-2 mb-md-0"> <div class="btn-group mr-2"> <button type=button class="btn btn-sm btn-outline-secondary">Share</button> <button type=button class="btn btn-sm btn-outline-secondary">Export</button> <button type=button class="btn btn-sm btn-outline-secondary">Import</button> </div> </div> </h4></div> <div id=pinkflow-editor style=width:100%;height:85%;background-color:#dae4e4></div> </main> </div> </div> <script src=../../../js/jquery-3.4.1.slim.min.js><\/script> <script>window.jQuery||document.write(\'<script type="text/javascript" src="../../../js/jquery-3.4.1.slim.min.js"><\\/script>\')<\/script> <script src=../../../js/bootstrap-4.4.0.bundle.min.js><\/script> <script src=../../../js/vue-2.6.10.min.js><\/script> <script src=go-debug.js><\/script> <script src=protocols/websocket.js><\/script> <script src=protocols/component.js><\/script> <script src=protocols/graph.js><\/script> <script src=protocols/network.js><\/script> <script src=protocols/runtime.js><\/script> <script src=protocols/trace.js><\/script> <script src=protocols/protocols.js><\/script> <script src=index.js><\/script> </body> </html> '},function(n,e,a){a(0)(a(9))},function(n,e){n.exports='var $$$ = go.GraphObject.make;\nvar viewModel;\n\nvar libVue = new Vue({\n    el: \'#blocks\',\n    data: {\n        components: {}\n    }\n});\n\n\nfunction init() {\n    let onOpened = function (conn) {\n        console.log("Try message", conn);\n        runtime_protocol.request_runtime(conn, "12345");\n        component_protocol.request_list(conn);\n    };\n    websocket.init(onOpened);\n    graph_protocol.currentGraph = "First";\n    runtime_protocol.currentSecret = "1234"\n\n    graph = $$$(go.Diagram, "pinkflow-editor",\n        {\n            "undoManager.isEnabled": true\n        });\n    graph.nodeTemplateMap = new go.Map();\n\n    graph.linkTemplate =\n        $$$(go.Link,\n            {routing: go.Link.Orthogonal, corner: 3},\n            $$$(go.Shape),\n            $$$(go.Shape, {toArrow: "Standard"})\n        );\n    graph.layout = $$$(go.LayeredDigraphLayout, {columnSpacing: 10});\n    viewModel = $$$(go.GraphLinksModel,\n        {\n            nodeDataArray: [],\n            linkDataArray: []\n\n        });\n    viewModel.linkFromPortIdProperty = "fromPort";\n    viewModel.linkToPortIdProperty = "toPort";\n    graph.model = viewModel;\n}\n\nfunction removeNode(e, obj) {\n    graph.commit(function (g) {\n        var contextmenu = obj.part;\n        var nodedata = contextmenu.data;\n        g.model.removeNodeData(nodedata);\n    }, "remove node");\n}\n\nfunction makePort(name, left) {\n    var port = $$$(go.Shape, "Rectangle",\n        {\n            fill: "gray", stroke: null,\n            desiredSize: new go.Size(8, 8),\n            portId: name,\n            toMaxLinks: 1,\n            cursor: "pointer"\n        });\n\n    var lab = $$$(go.TextBlock, name, {font: "7pt sans-serif"});\n\n    var panel = $$$(go.Panel, "Horizontal", {margin: new go.Margin(2, 0)});\n\n    if (left) {\n        port.toSpot = go.Spot.Left;\n        port.toLinkable = true;\n        lab.margin = new go.Margin(1, 0, 0, 1);\n        panel.alignment = go.Spot.TopLeft;\n        panel.add(port);\n        panel.add(lab);\n    } else {\n        port.fromSpot = go.Spot.Right;\n        port.fromLinkable = true;\n        lab.margin = new go.Margin(1, 1, 0, 0);\n        panel.alignment = go.Spot.TopRight;\n        panel.add(lab);\n        panel.add(port);\n    }\n    return panel;\n}\n\nfunction makeTemplate(fullname, component) {\n    graph.startTransaction("make template");\n    console.log("Make Template", fullname, component);\n    let typename = component.name;\n    let icon = component.icon;\n    let background = "#eee";\n    let inports = [];\n    let outports = [];\n    var idx;\n    var contextMenu = {};\n    contextMenu.addressableIn = false;\n    for (idx in component.inPorts) {\n        if (component.inPorts.hasOwnProperty(idx)) {\n            let portname = component.inPorts[idx].id;\n            if (component.inPorts[idx].addressable) {\n                contextMenu.addressableIn = true;\n            }\n            inports.push(makePort(portname, true));\n        }\n    }\n    for (idx in component.outPorts) {\n        if (component.outPorts.hasOwnProperty(idx)) {\n            let portname = component.outPorts[idx].id;\n            outports.push(makePort(portname, false));\n        }\n    }\n    let menuEntries = [];\n    menuEntries.push($$$("ContextMenuButton", $$$(go.TextBlock, "Delete"), {click: removeNode}));\n    if (contextMenu.addressableIn) {\n        menuEntries.push($$$("ContextMenuButton", $$$(go.TextBlock, "Add Inport"), {click: addNodeInport}))\n        menuEntries.push($$$("ContextMenuButton", $$$(go.TextBlock, "Remove Inport"), {click: removeNodeInport}))\n    }\n    var node = $$$(go.Node, "Spot",\n        {\n            contextMenu: $$$("ContextMenu", menuEntries)\n        },\n        $$$(go.Panel, "Auto",\n            // {width: 100, height: 120},\n            $$$(go.Shape, "Rectangle",\n                {\n                    fill: background,\n                    spot1: go.Spot.TopLeft, spot2: go.Spot.BottomRight\n                },\n            ),\n            $$$(go.Panel, "Table",\n                $$$(go.RowColumnDefinition,\n                    {column: 0, alignment: go.Spot.Left}),\n                $$$(go.RowColumnDefinition,\n                    {column: 2, alignment: go.Spot.Right}),\n                $$$(go.TextBlock,\n                    {\n                        column: 0, row: 0, columnSpan: 3, alignment: go.Spot.Center,\n                        editable: true,\n                        isMultiline: false,\n                        font: "bold 10pt sans-serif",\n                        margin: new go.Margin(10, 15)\n                    },\n                    new go.Binding("text", "id").makeTwoWay()\n                ),\n                $$$(go.TextBlock, ""),\n                $$$(go.TextBlock, typename,\n                    {\n                        row: 2, column: 0, columnSpan: 3,\n                        margin: new go.Margin(10, 15),\n                        maxSize: new go.Size(80, 40),\n                        alignment: go.Spot.Center,\n                        stroke: "black",\n                        font: "bold 9pt sans-serif"\n                    }\n                ),\n                $$$(go.Panel, "Vertical",\n                    {\n                        column: 0, row: 1,\n                        alignment: go.Spot.Left,\n                        alignmentFocus: new go.Spot(0, 0.5, 8, 0)\n                    },\n                    inports),\n                $$$(go.Panel, "Vertical",\n                    {\n                        column: 2, row: 1,\n                        alignment: go.Spot.Right,\n                        alignmentFocus: new go.Spot(1, 0.5, -8, 0)\n                    },\n                    outports)\n            )\n        )\n    );\n    graph.nodeTemplateMap.set(fullname, node);\n    graph.commitTransaction("make template");\n}\n\nvar componentCounter = 0;\n\nfunction instantiateComponent(lib, component) {\n    graph.startTransaction("add node");\n    let type = component.name;\n    console.log("AddComponent");\n    viewModel.addNodeData({\n        id: type + componentCounter++,\n        category: lib + "/" + type,\n        component: lib + "/" + type,\n        metadata: {\n            x: 50,\n            y: 50,\n        },\n        graph: graph_protocol.currentGraph,\n        secret: runtime_protocol.currentSecret\n    });\n    graph.commitTransaction("add node");\n    console.log("AddComponent end", viewModel.nodeDataArray);\n}\n'}]);